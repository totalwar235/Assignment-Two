Assignment Two

This assignment will compair the computational time of Factoring and Primality Testing

For the primality testing I wrote a function myself which has a Big O of "N", for the other primality algorithm it also has a Big O of "N". The Reason both of these are for a single for loop.

HomeBrewed :
        if ((User % 2) == 0) {
            hbprime = false;
            return duration;
        }
        for (int x = 3; x < User; x += 2) {
            temp = User % x;
            if (temp == 0) {
                hbprime = false;

                return duration;
            }
        }

Documented : 
        if (User == 2 || User == 1 || User == 0) {
            prime = true;
            return duration;
        }
        if (User % 2 == 0) {
            prime = false;
            return duration;
        }
        for (int i = 3; i <= Math.sqrt(User) + 1; i = i + 2) {
            if (User % i == 0) {
                prime = false;
                return duration;
            }
        }

These Algorithms are tested with know prime numbers and 100 random numbers and timed to show the difference in optimality. The results for one of my tests are here:
    Number: 1
            HomeBrewed ~ time: 0 
            Documented ~ time: 0

    Number: 13
            HomeBrewed ~ time: 0 
            Documented ~ time: 0

    Number: 15485863
            HomeBrewed ~ time: 68 
            Documented ~ time: 0

    Number: 32452843
            HomeBrewed ~ time: 143 
            Documented ~ time: 0

    Number: 49979687
            HomeBrewed ~ time: 220 
            Documented ~ time: 1

    Number: 67867967
            HomeBrewed ~ time: 301 
            Documented ~ time: 0

    Number: 104395301
            HomeBrewed ~ time: 460 
            Documented ~ time: 1

    Number: 256203161
            HomeBrewed ~ time: 1122 
            Documented ~ time: 0

    Number: 512927357
            HomeBrewed ~ time: 2244 
            Documented ~ time: 1

    Number: 756065159
            HomeBrewed ~ time: 3319 
            Documented ~ time: 1

    Number: 982451653
            HomeBrewed ~ time: 4337 
            Documented ~ time: 0

    100 random numbers
    Homebrewed avg time: 85
    Documented avg time: 0

With the results of the Primality tests we can tell my homebrewed algorithm is much less optimized even though the big O is the same at "N". In fact, on average it is 68 milliseconds slower and as the numbers get largest the time per prime number nearly doubles.

The second problem is Factoring,I have two documented solution, the first has a Big O of "N^2" but it has one more loop than the second Algorithm which is also documented at a Big O of "N^2".

Algorithm One:
        List<Long> factors = new ArrayList<>();
        long n;
        n = this.base;
        while (n % 2 == 0 && n > 0) {
            factors.add(2L);
            n /= 2;
        }

        for (long i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 1) {
            factors.add(n);
        }

        return factors;

Algorithm Two:
        int n = (int) base;
        List<Integer> factors = new ArrayList<>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 1) {
            factors.add(n);
        }

        return factors; 

These algorithms were tested with constant numbers and then using 100 random variables where the time used is averaged. Under those conditions I recieved these results.

    Number: 1
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 20
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 150
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 1

    Number: 2500
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 50000
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 100003
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 3000005
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 800000007
            Algorithm One ~ time: 0 
            Algorithm Two ~ time: 0

    Number: 250000013
            Algorithm One ~ time: 1 
            Algorithm Two ~ time: 1

    100 random numbers
            Algorithm One ~ avg time: 0 
            Algorithm Two ~ avg time: 0

The results of these tests show that the algorithms have about the exact same efficiency with the same numbers. If I wanted different results I would have to change from and int to a long and get larger numbers that would hopefully take more time.

